class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        def solve(self,word1,word2,n,i,m,j,dp):
            if i>n-1 or j>m-1:
                if i>n-1:
                    dp[i][j]=m-j
                    return dp[i][j]
                else:
                    dp[i][j]=n-i
                    return dp[i][j]
            if dp[i][j]!=-1:
                return dp[i][j]
            op1,op2,op3=float('inf'),float('inf'),float('inf')
            if word1[i]==word2[j]:
                dp[i][j]=solve(self,word1,word2,n,i+1,m,j+1,dp)
                return dp[i][j]
            else:
                op1=1+solve(self,word1,word2,n,i+1,m,j,dp)
                op2=1+solve(self,word1,word2,n,i,m,j+1,dp)
                op3=1+solve(self,word1,word2,n,i+1,m,j+1,dp)

            dp[i][j]=min(op1,min(op2,op3))
            return dp[i][j]
        n=len(word1)
        m=len(word2)
        if m==0:
            return n
        if n==0:
            return m
        dp=[[-1 for i in range(m+1)]for j in range(n+1)]
        return solve(self,word1,word2,n,0,m,0,dp) 
